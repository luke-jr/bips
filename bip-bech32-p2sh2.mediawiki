<pre>
  BIP: ?
  Layer: Applications
  Title: Bech32 address format with off-chain preimage
  Author: Luke Dashjr <luke+bip@dashjr.org>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/bitcoin/bips/wiki/Comments:BIP-?
  Status: Draft
  Type: Informational
  Created: 2018-01-05
  License: BSD-2-Clause
  Replaces: 173
</pre>

==Introduction==

===Abstract===

This document revises the "Bech32" format proposed in BIP 173, basing the address on a preimage of the final on-chain hash, rather than encoding the final hash directly.

===Copyright===

This BIP is licensed under the 2-clause BSD license.

===Motivation===

For several years, people have been abusing the Bitcoin blockchain as a means to force data storage onto archive nodes.
To mitigate the damage from this, node and miner policies have been modified to explicitly allow data carrier ("OP_RETURN") outputs which can be immediately pruned from the UTXO set.
However, this merely reduces the damage, and does not prevent the abuse.

Such data storage can never truly be prevented, since the scheme for storage can always be extended to handle more complicated encodings.
However, they can be made relatively expensive, by forbidding literal storage of data in scripts.

There are three kinds of literal data needed for on-chain transactions: hashes, public keys, and signatures.
Only signatures can not be prevented from including literal data entirely, but by requiring them to be verified, the cost to abuse them is significantly higher.
This BIP addresses a pre-requisitite for proving hashes: by encoding the pre-image of the final on-chain hash in the address, we can hypothetically relay that pre-image to prove the on-chain data is in fact a true hash.

No effort is made herein to actually specify or implement the transaction relay policy.

==Specification==

Bech32 from BIP 173 is used, but with a different payload:

* The human-readable part remains "bc" for mainnet, and "tb" for testnet.
* The data-part values:
** 1 value: the final hash algorithm
** 1 value: the witness version
** A pre-image of the the 2-to-40-byte witness program

'''Decoding'''

Software interpreting a segwit address:
* MUST verify that the human-readable part is "bc" for mainnet and "tb" for testnet.
* MUST verify that the first decoded data value (the hash algorithm) is between 166 and 170, inclusive.
* MUST verify that the second decoded data value (the witness version) is between 0 and 16, inclusive.
* Convert the rest of the data to bytes, and hash it using the hash algorithm specified by the first decoded value.

The hash algorithm is specified as a single Script opcode, which must be from the following table:

{| class="wikitable"
|-
!Word
!Opcode
!Hex
!Input
!Output
!Description
|-
|OP_RIPEMD160
|166
|0xa6
|in
|hash
|The input is hashed using RIPEMD-160.
|-
|OP_SHA1
|167
|0xa7
|in
|hash
|The input is hashed using SHA-1.
|-
|OP_SHA256
|168
|0xa8
|in
|hash
|The input is hashed using SHA-256.
|-
|OP_HASH160
|169
|0xa9
|in
|hash
|The input is hashed twice: first with SHA-256 and then with RIPEMD-160.
|-
|OP_HASH256
|170
|0xaa
|in
|hash
|The input is hashed two times with SHA-256.
|}

Decoders SHOULD enforce known-length restrictions on witness programs.
For example, BIP141 specifies ''If the version byte is 0, but the witness
program is neither 20 nor 32 bytes, the script must fail.''

As a result of the previous rules, addresses are always between FIXME and FIXME characters long, and their length modulo 8 cannot be 0, 3, or 5 (FIXME?).
Version 0 witness addresses are always FIXME or FIXME characters, but implementations MUST allow the use of any version.

Implementations should take special care when converting the address to a
scriptPubkey, where witness version ''n'' is stored as ''OP_n''. OP_0 is
encoded as 0x00, but OP_1 through OP_16 are encoded as 0x51 though 0x60
(81 to 96 in decimal). If a bech32 address is converted to an incorrect
scriptPubKey the result will likely be either unspendable or insecure.

===Compatibility===

Only new software will be able to use these addresses.

==Reference implementations==

TODO

==Acknowledgements==

This document is based on BIP 173, integrating an idea originally known as P2SH^2 by Gregory Maxwell in 2013.
